// Each #kernel tells which function to compile; you can have many kernels
#define GRASS_THREAD_WIDTH 32
#include "Util.compute"
#pragma kernel GetPosition


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct GrassData
{
    float2 chunkUV;
    float3 position;
};


RWStructuredBuffer<GrassData> _GrassBuffer;

uint _GrassHorizonCount;
uint _GrassVerticalCount;
float2 _GridPos; //min
float2 _GridSize;

Texture2D<float> _HeightMap;
SamplerState sampler_HeightMap;
float _TexWorldSize; //quality 1 size
float2 _TexCenterPosXZ;

//bilinear
//float GetHeight(float2 uv)
//{
//    int texWidth = _HeightBufferSize.x;
//    float2 uvMulSize = saturate(uv) * texWidth;
//    int2 lbot = int2(floor(uvMulSize.x), floor(uvMulSize.y));
//    int2 rbot = int2(ceil(uvMulSize.x), floor(uvMulSize.y));
//    int2 ltop = int2(floor(uvMulSize.x), ceil(uvMulSize.y));
//    int2 rtop = int2(ceil(uvMulSize.x), ceil(uvMulSize.y));
//    
//    float lbotHeight = _HeightMap[lbot];
//    float rbotHeight = _HeightMap[rbot];
//    float ltopHeight = _HeightMap[ltop];
//    float rtopHeight = _HeightMap[rtop];
//    
//    float2 lbotWeight = 1 - (uvMulSize - lbot);
//    
//    float botHeight = lbotHeight * lbotWeight.x + rbotHeight * (1 - lbotWeight.x);
//    float topHeight = ltopHeight * lbotWeight.x + rtopHeight * (1 - lbotWeight.x);
//    
//    float height = botHeight * lbotWeight.y + topHeight * (1 - lbotWeight.y);
//    return height;
//}

[numthreads(GRASS_THREAD_WIDTH, GRASS_THREAD_WIDTH,1)]
void GetPosition(uint3 t_id : SV_GroupThreadID, uint3 g_id : SV_GroupID)
{
    uint groupCountRow = _GrassHorizonCount / GRASS_THREAD_WIDTH + (_GrassHorizonCount % GRASS_THREAD_WIDTH == 0 ? 0 : 1);
    uint groupIdx = g_id.x + g_id.y * groupCountRow;

    uint idx_x = GRASS_THREAD_WIDTH * g_id.x + t_id.x;
    uint idx_y = GRASS_THREAD_WIDTH * g_id.y + t_id.y;

    if (idx_x >= _GrassHorizonCount || idx_y >= _GrassVerticalCount)
    {
        return;
    }

    uint idx = idx_x + idx_y * _GrassHorizonCount;
    float dis_x = _GrassHorizonCount <= 1 ? 0 : _GridSize.x / (_GrassHorizonCount - 1);
    float dis_y = _GrassVerticalCount <= 1 ? 0 : _GridSize.y / (_GrassVerticalCount - 1);
    float2 minxz = _GridPos;
    float3 curPos = float3(0, 0, 0);
    curPos.xz = minxz + float2(dis_x * idx_x, dis_y * idx_y);
    curPos.y = 0;

    uint3 randomAngleSeed = uint3(asuint(curPos.x), asuint(curPos.z), 1);
    uint3 randomDisSeed = uint3(asuint(curPos.x), asuint(curPos.z), 2);
    uint3 randomHeightSeed = uint3(asuint(curPos.x), asuint(curPos.z), 3);
    float randomPosAngle = DRandomXORShift(Vector3IntToSeed(randomAngleSeed)) / (float)UINT_MAX;
    float randomDis = DRandomXORShift(Vector3IntToSeed(randomDisSeed)) / (float)UINT_MAX;
    float randomHeight = DRandomXORShift(Vector3IntToSeed(randomHeightSeed)) / (float)UINT_MAX;
    randomPosAngle *= 2 * PI;
    
    float3 randomAdditionalPos = float3(cos(randomPosAngle) * randomDis, randomHeight * 0.05f, sin(randomPosAngle) * randomDis);
    curPos += randomAdditionalPos * float3(dis_x, (dis_x + dis_y) * 0.05f, dis_y);

    float2 gridUV = (curPos.xz - minxz) / _GridSize;

    float2 worldXZ = curPos.xz;
    float2 texMin = _TexCenterPosXZ - _TexWorldSize * 0.5f;
    float2 texMax = _TexCenterPosXZ + _TexWorldSize * 0.5f;
    float2 worldHeightMapUV = saturate((worldXZ - texMin) / (texMax - texMin));

    float height = _HeightMap.SampleLevel(sampler_HeightMap, worldHeightMapUV, 0).r;
    curPos.y += height;
    
    GrassData grass;
    grass.position = curPos;
    grass.chunkUV = gridUV;

    _GrassBuffer[idx] = grass;
}
