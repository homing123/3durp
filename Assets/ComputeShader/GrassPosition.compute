// Each #kernel tells which function to compile; you can have many kernels
#define GRASS_THREAD_WIDTH 32
#include "Util.compute"
#pragma kernel GetPosition


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct GrassData
{
    float2 chunkUV;
    float3 position;
};

RWTexture2D<float> _HeightMap;
RWStructuredBuffer<GrassData> _GrassBuffer;
uint2 _HeightBufferSize;
uint _GrassHorizonCount;
uint _GrassVerticalCount;
float2 _GridPos; 
float2 _GridSize;
[numthreads(GRASS_THREAD_WIDTH, GRASS_THREAD_WIDTH,1)]
void GetPosition(uint3 t_id : SV_GroupThreadID, uint3 g_id : SV_GroupID)
{
    uint groupCountRow = _GrassHorizonCount / GRASS_THREAD_WIDTH + (_GrassHorizonCount % GRASS_THREAD_WIDTH == 0 ? 0 : 1);
    uint groupIdx = g_id.x + g_id.y * groupCountRow;

    uint idx_x = GRASS_THREAD_WIDTH * g_id.x + t_id.x;
    uint idx_y = GRASS_THREAD_WIDTH * g_id.y + t_id.y;

    if (idx_x >= _GrassHorizonCount || idx_y >= _GrassVerticalCount)
    {
        return;
    }

    uint idx = idx_x + idx_y * _GrassHorizonCount;
    float dis_x = _GrassHorizonCount <= 1 ? 0 : _GridSize.x / (_GrassHorizonCount - 1);
    float dis_y = _GrassVerticalCount <= 1 ? 0 : _GridSize.y / (_GrassVerticalCount - 1);
    float2 minxz = _GridPos;
    float3 curPos = float3(0, 0, 0);
    curPos.xz = minxz + float2(dis_x * idx_x, dis_y * idx_y);
    curPos.y = 0;

    uint3 randomAngleSeed = uint3(asuint(curPos.x), asuint(curPos.z), 1);
    uint3 randomDisSeed = uint3(asuint(curPos.x), asuint(curPos.z), 2);
    uint3 randomHeightSeed = uint3(asuint(curPos.x), asuint(curPos.z), 3);
    float randomPosAngle = DRandomXORShift(Vector3IntToSeed(randomAngleSeed)) / (float)UINT_MAX;
    float randomDis = DRandomXORShift(Vector3IntToSeed(randomDisSeed)) / (float)UINT_MAX;
    float randomHeight = DRandomXORShift(Vector3IntToSeed(randomHeightSeed)) / (float)UINT_MAX;
    randomPosAngle *= 2 * PI;
    
    float3 randomAdditionalPos = float3(cos(randomPosAngle) * randomDis, randomHeight * 0.05f, sin(randomPosAngle) * randomDis);
    curPos += randomAdditionalPos * float3(dis_x, (dis_x + dis_y) * 0.05f, dis_y) * 0.5f;

    float2 uv = (curPos.xz - minxz) / _GridSize;
    uint heightMapIdx_x = uv.x == 1 ? _HeightBufferSize.x - 1 : uv.x * _HeightBufferSize.x;
    uint heightMapIdx_y = uv.y == 1 ? _HeightBufferSize.y - 1 : uv.y * _HeightBufferSize.y;
    uint2 heightMapIdx = uint2(heightMapIdx_x, heightMapIdx_y);
    curPos.y += _HeightMap[heightMapIdx];//heightmap
   
    GrassData grass;
    grass.position = curPos;
    grass.chunkUV = uv;

    _GrassBuffer[idx] = grass;
}
