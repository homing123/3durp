// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel TextureMerge2x2
#define THREAD_WIDTH 32

Texture2D<float> _HeightMap0;
Texture2D<float> _HeightMap1;
Texture2D<float> _HeightMap2;
Texture2D<float> _HeightMap3;
SamplerState sampler_HeightMap0;
SamplerState sampler_HeightMap1;
SamplerState sampler_HeightMap2;
SamplerState sampler_HeightMap3;

Texture2D<float4> _NormalMap0;
Texture2D<float4> _NormalMap1;
Texture2D<float4> _NormalMap2;
Texture2D<float4> _NormalMap3;
SamplerState sampler_NormalMap0;
SamplerState sampler_NormalMap1;
SamplerState sampler_NormalMap2;
SamplerState sampler_NormalMap3;


RWTexture2D<float> _HeightMergeMap;
RWTexture2D<float4> _NormalMergeMap;

int2 _MergeTexSize;
int2 _DataTexSize;
int2 _DataTexCount;
float2 _UVMin;
float2 _UVMax;

[numthreads(THREAD_WIDTH, THREAD_WIDTH, 1)]
void TextureMerge2x2(uint3 t_id : SV_GroupThreadID, uint3 g_id : SV_GroupID)
{
    uint groupCountRow = _MergeTexSize.x / THREAD_WIDTH + (_MergeTexSize.x % THREAD_WIDTH == 0 ? 0 : 1);
    uint groupIdx = g_id.x + g_id.y * groupCountRow;

    uint group_x = groupIdx % groupCountRow;
    uint group_y = groupIdx / groupCountRow;

    uint idx_x = THREAD_WIDTH * group_x + t_id.x;
    uint idx_y = THREAD_WIDTH * group_y + t_id.y;

    if (idx_x >= _MergeTexSize.x || idx_y >= _MergeTexSize.y)
    {
        return;
    }
    float2 uv = float2(idx_x, idx_y) / (_MergeTexSize - 1);
    uv = lerp(_UVMin, _UVMax, uv);

    int2 tileIndex = int2((int)floor(uv.x), (int)floor(uv.y));
    float2 localUV = uv - tileIndex;

    float height = 0.0f;
    float4 normal = 0;

    if (tileIndex.x == 0 && tileIndex.y == 0)
    {
        height = _HeightMap0.SampleLevel(sampler_HeightMap0, localUV, 0);
        normal = _NormalMap0.SampleLevel(sampler_NormalMap0, localUV, 0);
    }
    else if (tileIndex.x == 1 && tileIndex.y == 0)
    {
        height = _HeightMap1.SampleLevel(sampler_HeightMap1, localUV, 0);
        normal = _NormalMap1.SampleLevel(sampler_NormalMap1, localUV, 0);
    }
    else if (tileIndex.x == 0 && tileIndex.y == 1)
    {
        height = _HeightMap2.SampleLevel(sampler_HeightMap2, localUV, 0);
        normal = _NormalMap2.SampleLevel(sampler_NormalMap2, localUV, 0);
    }
    else if (tileIndex.x == 1 && tileIndex.y == 1)
    {
        height = _HeightMap3.SampleLevel(sampler_HeightMap3, localUV, 0);
        normal = _NormalMap3.SampleLevel(sampler_NormalMap3, localUV, 0);
    }

    // Store merged height
    _HeightMergeMap[uint2(idx_x, idx_y)] = height;
    _NormalMergeMap[uint2(idx_x, idx_y)] = normal;
}
