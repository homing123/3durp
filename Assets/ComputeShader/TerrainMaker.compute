#pragma kernel HeightMap
#pragma kernel NormalMap
#define THREAD_WIDTH 32
#define GROUP_MAX 512
#include "Util.compute"

RWTexture2D<float> _HeightMap;
RWTexture2D<float> _HeightMapForNormalMap;
RWTexture2D<uint> _NormalMap;
float _GradientRadianMul;
float2 _Offset;
uint2 _TexSize;
uint2 _HeightForNormalTexSize;
float _Scale;
float _Amplitude;
float _Frequency;
float _Persistence;
float _Lacunarity;
int _Octaves;
float2 _D;




float3 GetNormal(float left, float right, float bottom, float top)
{
    float3 horizon = float3(2 * _D.x, 0, right - left);
    float3 vertical = float3(0, 2 * _D.y, top - bottom);
    return normalize(DotProduct(horizon, vertical));
}

float PerlinNoise(int idx_x, int idx_y)
{
    float value = 0;
    float frequency = _Frequency;
    float amplitude = _Amplitude;
    for (int i = 0; i < _Octaves; i++)
    {
        float x = (idx_x * _Scale * 0.01f + _Offset.x) * frequency;
        float y = (idx_y * _Scale * 0.01f + _Offset.y) * frequency;
        float2 curPos = float2(x, y);

        int i_x = (int)floor(x);
        int i_y = (int)floor(y);

        int2 grid_lbot = int2(i_x, i_y);
        int2 grid_ltop = int2(i_x, i_y + 1);
        int2 grid_rbot = int2(i_x + 1, i_y);
        int2 grid_rtop = int2(i_x + 1, i_y + 1);

        float gradientMul = PI * 2 * _GradientRadianMul;

        float gradient_lbot = DRandomXORShift(Vector2IntToSeed(grid_lbot)) / (float)UINT_MAX;
        float gradient_ltop = DRandomXORShift(Vector2IntToSeed(grid_ltop)) / (float)UINT_MAX;
        float gradient_rbot = DRandomXORShift(Vector2IntToSeed(grid_rbot)) / (float)UINT_MAX;
        float gradient_rtop = DRandomXORShift(Vector2IntToSeed(grid_rtop)) / (float)UINT_MAX;

        gradient_lbot *= gradientMul;
        gradient_ltop *= gradientMul;
        gradient_rbot *= gradientMul;
        gradient_rtop *= gradientMul;

        float2 gradientVec_lbot = float2(cos(gradient_lbot), sin(gradient_lbot));
        float2 gradientVec_ltop = float2(cos(gradient_ltop), sin(gradient_ltop));
        float2 gradientVec_rbot = float2(cos(gradient_rbot), sin(gradient_rbot));
        float2 gradientVec_rtop = float2(cos(gradient_rtop), sin(gradient_rtop));

        float2 disVec_lbot = curPos - grid_lbot;
        float2 disVec_ltop = curPos - grid_ltop;
        float2 disVec_rbot = curPos - grid_rbot;
        float2 disVec_rtop = curPos - grid_rtop;

        float weight_lbot = dot(gradientVec_lbot, disVec_lbot);
        float weight_ltop = dot(gradientVec_ltop, disVec_ltop);
        float weight_rbot = dot(gradientVec_rbot, disVec_rbot);
        float weight_rtop = dot(gradientVec_rtop, disVec_rtop);

        float weight_bot = PerlinInterpolation(weight_lbot, weight_rbot, x - (int)floor(x));
        float weight_top = PerlinInterpolation(weight_ltop, weight_rtop, x - (int)floor(x));

        float weight = PerlinInterpolation(weight_bot, weight_top, y - (int)floor(y));

        value += amplitude * weight;

        amplitude *= _Persistence;
        frequency *= _Lacunarity;
    }
    return value;
}

[numthreads(THREAD_WIDTH, THREAD_WIDTH, 1)]
void HeightMap(uint3 t_id : SV_GroupThreadID, uint3 g_id : SV_GroupID)
{
    uint groupCountRow = _HeightForNormalTexSize.x / THREAD_WIDTH + (_HeightForNormalTexSize.x % THREAD_WIDTH == 0 ? 0 : 1);
    uint groupIdx = g_id.x + g_id.y * groupCountRow;

    uint group_x = groupIdx % groupCountRow;
    uint group_y = groupIdx / groupCountRow;

    uint idx_x = THREAD_WIDTH * group_x + t_id.x;
    uint idx_y = THREAD_WIDTH * group_y + t_id.y;

    if (idx_x >= _HeightForNormalTexSize.x || idx_y >= _HeightForNormalTexSize.y)
    {
        return;
    }
    float value = PerlinNoise((int)idx_x - 1, (int)idx_y - 1);
    uint2 heightForNormalMapIdx = uint2(idx_x, idx_y);
    uint2 heightMapIdx = uint2(idx_x - 1, idx_y - 1);

    if ((idx_x == 0 || idx_x == _HeightForNormalTexSize.x - 1 || idx_y == 0 || idx_y == _HeightForNormalTexSize.y - 1) == false)
    {
        _HeightMap[heightMapIdx] = value;
        _NormalMap[heightMapIdx] = (255 << 24) | (255 << 16) | (255 << 8) | 255;
    }

    _HeightMapForNormalMap[heightForNormalMapIdx] = value;

}


[numthreads(THREAD_WIDTH, THREAD_WIDTH, 1)]
void NormalMap(uint3 t_id : SV_GroupThreadID, uint3 g_id : SV_GroupID)
{
    uint groupCountRow = _TexSize.x / THREAD_WIDTH + (_TexSize.x % THREAD_WIDTH == 0 ? 0 : 1);
    uint groupIdx = g_id.x + g_id.y * groupCountRow;

    uint group_x = groupIdx % groupCountRow;
    uint group_y = groupIdx / groupCountRow;

    uint idx_x = THREAD_WIDTH * group_x + t_id.x;
    uint idx_y = THREAD_WIDTH * group_y + t_id.y;

    if (idx_x >= _TexSize.x || idx_y >= _TexSize.y)
    {
        return;
    }
    uint2 normalMapIdx = uint2(idx_x, idx_y);
    uint2 heightMapIdx = uint2(idx_x + 1, idx_y + 1);
    _NormalMap[normalMapIdx] = asfloat((255 << 24) | (255 << 16) | (255 << 8) | 255);
    return;

    //float left = _HeightMapForNormalMap[heightMapIdx + uint2(-1,0)];
    //float right = _HeightMapForNormalMap[heightMapIdx + uint2(1, 0)];
    //float bottom = _HeightMapForNormalMap[heightMapIdx + uint2(0, -1)];
    //float top = _HeightMapForNormalMap[heightMapIdx + uint2(0, 1)];
    //float3 normal = GetNormal(left, right, bottom, top); //-1~1
    //uint x = (uint)((normal.x * 0.5f + 0.5f) * 255.0f);
    //uint y = (uint)((normal.y * 0.5f + 0.5f) * 255.0f);
    //uint z = (uint)((normal.z * 0.5f + 0.5f) * 255.0f);
    //x = 255;
    //y = 124;
    //z = 30;
    //uint rgb = (x << 16) | (y << 8) | z;
    //_NormalMap[uint2(0,0)] = 255;
}
