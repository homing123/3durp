


#pragma kernel PerlinNoise_Texture
#pragma kernel PerlinNoise_Terrain
#define PERLIN_THREAD_WIDTH 32
#define GROUP_MAX 512


#define PI 3.1415926535f
#define UINT_MAX 0xFFFFFFFF

uint DRandomXORShift(uint seed)
{
    seed ^= seed >> 16;
    seed *= 0x85ebca6b;
    seed ^= seed >> 13;
    seed *= 0xc2b2ae35;
    seed ^= seed >> 16;
    return seed;
}
uint Vector2IntToSeed(int2 vt2Int)
{
    uint seed = ((uint)vt2Int.x * 73856093u) ^ ((uint)vt2Int.y * 19349663u) + 104395301u;
    return seed;
}

float PerlinInterpolation(float left, float right, float t)
{
    float ease = 6 * pow(t, 5) - 15 * pow(t, 4) + 10 * pow(t, 3);
    return left + (right - left) * ease;
}


RWStructuredBuffer<float4> _ColorBuffer;
RWStructuredBuffer<float> _HeightBuffer;
float _GradientRadianMul;
float2 _Offset;
uint2 _TexSize;
float _Scale;
float _Amplitude;
float _Frequency;
float _Persistence;
float _Lacunarity;
int _Octaves;

float PerlinNoise(uint idx_x, uint idx_y)
{
    float value = 0;
    float frequency = _Frequency;
    float amplitude = _Amplitude;
    for (int i = 0; i < _Octaves; i++)
    {
        float x = (idx_x * _Scale * 0.01f + _Offset.x) * frequency;
        float y = (idx_y * _Scale * 0.01f + _Offset.y) * frequency;
        float2 curPos = float2(x, y);

        int i_x = (int)floor(x);
        int i_y = (int)floor(y);

        int2 grid_lbot = int2(i_x, i_y);
        int2 grid_ltop = int2(i_x, i_y + 1);
        int2 grid_rbot = int2(i_x + 1, i_y);
        int2 grid_rtop = int2(i_x + 1, i_y + 1);

        float gradientMul = PI * 2 * _GradientRadianMul;
        float gradient_lbot = DRandomXORShift(Vector2IntToSeed(grid_lbot)) / (float)UINT_MAX;
        float gradient_ltop = DRandomXORShift(Vector2IntToSeed(grid_ltop)) / (float)UINT_MAX;
        float gradient_rbot = DRandomXORShift(Vector2IntToSeed(grid_rbot)) / (float)UINT_MAX;
        float gradient_rtop = DRandomXORShift(Vector2IntToSeed(grid_rtop)) / (float)UINT_MAX;

        gradient_lbot *= gradientMul;
        gradient_ltop *= gradientMul;
        gradient_rbot *= gradientMul;
        gradient_rtop *= gradientMul;

        float2 gradientVec_lbot = float2(cos(gradient_lbot), sin(gradient_lbot));
        float2 gradientVec_ltop = float2(cos(gradient_ltop), sin(gradient_ltop));
        float2 gradientVec_rbot = float2(cos(gradient_rbot), sin(gradient_rbot));
        float2 gradientVec_rtop = float2(cos(gradient_rtop), sin(gradient_rtop));

        float2 disVec_lbot = curPos - grid_lbot;
        float2 disVec_ltop = curPos - grid_ltop;
        float2 disVec_rbot = curPos - grid_rbot;
        float2 disVec_rtop = curPos - grid_rtop;

        float weight_lbot = dot(gradientVec_lbot, disVec_lbot);
        float weight_ltop = dot(gradientVec_ltop, disVec_ltop);
        float weight_rbot = dot(gradientVec_rbot, disVec_rbot);
        float weight_rtop = dot(gradientVec_rtop, disVec_rtop);

        float weight_bot = PerlinInterpolation(weight_lbot, weight_rbot, x - (int)floor(x));
        float weight_top = PerlinInterpolation(weight_ltop, weight_rtop, x - (int)floor(x));

        float weight = PerlinInterpolation(weight_bot, weight_top, y - (int)floor(y));

        value += amplitude * weight;

        amplitude *= _Persistence;
        frequency *= _Lacunarity;
    }
    return value;
}

[numthreads(PERLIN_THREAD_WIDTH, PERLIN_THREAD_WIDTH, 1)]
void PerlinNoise_Texture(uint3 t_id : SV_GroupThreadID, uint3 g_id : SV_GroupID)
{
    uint groupCountRow = _TexSize.x / PERLIN_THREAD_WIDTH + (_TexSize.x % PERLIN_THREAD_WIDTH == 0 ? 0 : 1);
    uint groupIdx = g_id.x + g_id.y * groupCountRow;

    uint group_x = groupIdx % groupCountRow;
    uint group_y = groupIdx / groupCountRow;

    uint idx_x = PERLIN_THREAD_WIDTH * group_x + t_id.x;
    uint idx_y = PERLIN_THREAD_WIDTH * group_y + t_id.y;

    if (idx_x >= _TexSize.x || idx_y >= _TexSize.y)
    {
        return;
    }

    float value = PerlinNoise(idx_x, idx_y) * 0.5f + 0.5f;
    float4 color = float4(value, value, value, 1);

    _ColorBuffer[idx_x + idx_y * _TexSize.x] = color;
}


[numthreads(PERLIN_THREAD_WIDTH, PERLIN_THREAD_WIDTH, 1)]
void PerlinNoise_Terrain(uint3 t_id : SV_GroupThreadID, uint3 g_id : SV_GroupID)
{
    uint groupCountRow = _TexSize.x / PERLIN_THREAD_WIDTH + (_TexSize.x % PERLIN_THREAD_WIDTH == 0 ? 0 : 1);
    uint groupIdx = g_id.x + g_id.y * groupCountRow;

    uint group_x = groupIdx % groupCountRow;
    uint group_y = groupIdx / groupCountRow;

    uint idx_x = PERLIN_THREAD_WIDTH * group_x + t_id.x;
    uint idx_y = PERLIN_THREAD_WIDTH * group_y + t_id.y;

    if (idx_x >= _TexSize.x || idx_y >= _TexSize.y)
    {
        return;
    }


    float value = PerlinNoise(idx_x, idx_y);
    _HeightBuffer[idx_x + idx_y * _TexSize.x] = value;
}